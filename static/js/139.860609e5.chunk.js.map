{"version":3,"file":"static/js/139.860609e5.chunk.js","mappings":"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","sources":["Pages/SubPay/SubPay.js","Pages/SubPay/SoftwarePay.js"],"sourcesContent":["import React from \"react\";\r\nimport Purchase from \"./Purchase\";\r\nimport { ArrowBarLeft } from \"react-bootstrap-icons\";\r\n\r\nconst SubPay = ({ subs, updatePay, softwareId }) => {\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <div className=\" row d-flex justify-content-center\">\r\n        <div className=\"col-md-6 \">\r\n          <h6 className=\"text-center\">\r\n            {subs.length > 0\r\n              ? \"Get Maintenance And Update Code At 29$ only\"\r\n              : \"Get Activation Code at 99$ only\"}\r\n          </h6>\r\n          <p className=\"text-center\">\r\n            <small>\r\n              <em>\r\n                {subs.length > 0\r\n                  ? `Previous Activation Code if not already used ${\r\n                      subs[subs.length - 1].code\r\n                    }`\r\n                  : null}\r\n              </em>\r\n            </small>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row d-flex justify-content-center\">\r\n        <div className=\"col-md-6 justify-content-center\">\r\n          {subs.length > 0 ? (\r\n            <Purchase\r\n              softwareId={softwareId}\r\n              amount={\"29.0\"}\r\n              from={\"software\"}\r\n            ></Purchase>\r\n          ) : (\r\n            <Purchase\r\n              softwareId={softwareId}\r\n              amount={\"99.0\"}\r\n              from={\"software\"}\r\n            ></Purchase>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\" row d-flex justify-content-center\">\r\n        <div className=\"col-md-6 d-flex justify-content-around\">\r\n          <button\r\n            className=\"btn btn-sm btn-outline-secondary\"\r\n            onClick={() => updatePay(false)}\r\n          >\r\n            <ArrowBarLeft></ArrowBarLeft> Go Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubPay;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { ApiUrl } from \"../../Network/Urls\";\r\nimport swal from \"sweetalert\";\r\nimport SubPay from \"./SubPay\";\r\nimport Header from \"../../components/Header\";\r\n\r\nconst SoftwarePay = () => {\r\n  const [Loading, setLoading] = useState(false);\r\n  const [SoftwareId, setSoftwareId] = useState(\"\");\r\n  const [ConfirmId, setConfirmId] = useState(\"\");\r\n  const [Pay, setPay] = useState(false);\r\n  const [Error, setError] = useState(false);\r\n\r\n  const [Subs, setSubs] = useState([]);\r\n\r\n  const HandleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (SoftwareId !== ConfirmId) {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    await GetSubs();\r\n    setPay(true);\r\n    setLoading(false);\r\n  };\r\n  const GetSubs = async () => {\r\n    await fetch(`${ApiUrl}/sub/fetch`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        authorization: `bearer `,\r\n      },\r\n      body: JSON.stringify({\r\n        softwareId: SoftwareId.split(\"\").reverse().join(\"\"),\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setSubs(res.subs);\r\n        } else {\r\n          swal({\r\n            title: \"Failed to connect\",\r\n            icon: \"warning\",\r\n            timer: 3000,\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        swal({\r\n          title: \"Failed to connect\",\r\n          icon: \"warning\",\r\n          timer: 3000,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <div\r\n        className=\"row d-flex justify-content-center\"\r\n        style={{ marginTop: \"40px\" }}\r\n      >\r\n        <div className=\"col-md-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h6 className=\"text-center\">\r\n                Activate Rental Techsystem Software\r\n              </h6>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              {Pay ? (\r\n                <SubPay\r\n                  subs={Subs}\r\n                  updatePay={setPay}\r\n                  softwareId={SoftwareId.split(\"\").reverse().join(\"\")}\r\n                ></SubPay>\r\n              ) : (\r\n                <Form onSubmit={HandleSubmit}>\r\n                  <div className=\"form-group\">\r\n                    <label className=\"mb-2 text-capitalize\">Software Id:</label>\r\n                    <input\r\n                      className=\"rounded form-control\"\r\n                      placeholder={`enter software id`}\r\n                      value={SoftwareId}\r\n                      onChange={(e) => setSoftwareId(e.target.value)}\r\n                      required\r\n                    />\r\n                    <hr />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label className=\"mb-2 text-capitalize\">\r\n                      Confirm Software Id:\r\n                      {Error ? (\r\n                        <small className=\"text-danger\">\r\n                          <em>Not Matching</em>\r\n                        </small>\r\n                      ) : null}\r\n                    </label>\r\n                    <input\r\n                      className=\"rounded form-control\"\r\n                      placeholder={`confirm software id`}\r\n                      value={ConfirmId}\r\n                      onChange={(e) => setConfirmId(e.target.value)}\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <hr />\r\n                  <div className=\"d-flex justify-content-around mb-2\">\r\n                    {Loading ? (\r\n                      <span className=\"spinner-border text-primary\"></span>\r\n                    ) : (\r\n                      <Button variant=\"primary\" type=\"submit\">\r\n                        Next\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SoftwarePay;\r\n"],"names":["_ref","subs","updatePay","softwareId","_jsxs","children","_jsx","className","length","concat","code","Purchase","amount","from","onClick","ArrowBarLeft","_useState","useState","_useState2","_slicedToArray","Loading","setLoading","_useState3","_useState4","SoftwareId","setSoftwareId","_useState5","_useState6","ConfirmId","setConfirmId","_useState7","_useState8","Pay","setPay","_useState9","_useState10","Error","setError","_useState11","_useState12","Subs","setSubs","HandleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","GetSubs","stop","_x","apply","arguments","_ref2","_callee2","_context2","fetch","ApiUrl","method","headers","authorization","body","JSON","stringify","split","reverse","join","then","res","json","status","swal","title","icon","timer","catch","Header","style","marginTop","SubPay","Form","onSubmit","placeholder","value","onChange","target","required","Button","variant","type"],"sourceRoot":""}